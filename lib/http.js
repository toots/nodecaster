// Generated by CoffeeScript 1.6.3
(function() {
  var HttpHandler, Mpeg, MpegHandler, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  Mpeg = require("./formats/mpeg").Mpeg;

  HttpHandler = (function() {
    function HttpHandler(source) {
      this.source = source;
    }

    HttpHandler.prototype.serveClient = function(req, res) {
      var _this = this;
      this.source.addClient(this.createClient());
      return res.on("end", function() {
        return _this.source.removeClient(_this.client);
      });
    };

    return HttpHandler;

  })();

  MpegHandler = (function(_super) {
    __extends(MpegHandler, _super);

    function MpegHandler() {
      _ref = MpegHandler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MpegHandler.prototype.createClient = function(req, res) {
      var client, icyMetadata;
      if (req.get("Icy-MetaData") === "1") {
        icyMetadata = true;
      } else {
        icyMetadata = false;
      }
      client = new Mpeg.Client({
        icyMetadata: icyMetadata,
        destination: res
      });
      if (icyMetadata) {
        res.set("icy-metaint", client.icyMetadataInterval);
      }
      res.set("Content-Type", "audio/mpeg");
      return client;
    };

    return MpegHandler;

  })(HttpHandler);

  module.exports = function(app, mount, req, res) {
    var handler;
    if (app.routes.get[mount] != null) {
      return res.status(503).end("mount point taken!");
    }
    handler = null;
    switch (req.get("Content-Type")) {
      case "audio/mpeg":
        handler = new MpegHandler(source);
        break;
      default:
        return res.send(501);
    }
    req.pipe(handler.source);
    res.send("Thanks, brah!");
    app.get(mount, function(req, res) {
      return handler.serveClient(req, res);
    });
    return res.on("end", function() {
      return delete app.routes.get[mount];
    });
  };

}).call(this);
