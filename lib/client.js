// Generated by CoffeeScript 1.6.3
(function() {
  var Transform, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require("underscore");

  Transform = require("stream").Transform;

  module.exports.Client = (function(_super) {
    __extends(Client, _super);

    function Client(opts) {
      if (opts == null) {
        opts = {};
      }
      Client.__super__.constructor.call(this, {
        highWaterMark: opts.queueSize || 524288
      });
      this.clients = [];
    }

    Client.prototype.pipe = function(stream) {
      var callback;
      Client.__super__.pipe.apply(this, arguments);
      callback = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        args.unshift("metadata");
        return stream.emit.apply(stream, args);
      };
      this.addListener("metadata", callback);
      return this.clients.push([stream, callback]);
    };

    Client.prototype.unpipe = function(stream) {
      var client;
      Client.__super__.unpipe.apply(this, arguments);
      if (stream == null) {
        this.removeAllListeners("metadata");
        this.clients = [];
        return;
      }
      client = _.find(this.clients, function(_arg) {
        var str;
        str = _arg[0];
        return str === stream;
      });
      if (client != null) {
        this.removeListener("metadata", client[1]);
        return this.clients = _.without(this.clients, client[0]);
      }
    };

    Client.prototype._transform = function(chunk, encoding, callback) {
      this.push(new Buffer(chunk, encoding));
      return callback();
    };

    Client.prototype._flush = function(callback) {
      return callback();
    };

    return Client;

  })(Transform);

}).call(this);
