// Generated by CoffeeScript 1.6.3
(function() {
  var Http.Handler, Mpeg, MpegHandler, hasRoute, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  Mpeg = require("./formats/mpeg").Mpeg;

  hasRoute = function(app, route) {
    var _ref;
    return ((_ref = app.routes.get) != null ? _ref[route] : void 0) != null;
  };

  Http.Handler = (function() {
    function Http.Handler(app, mount) {
      var _this = this;
      this.app = app;
      this.mount = mount;
      this.source = this.createSource();
      this.app.get(this.mount, function(req, res) {
        return _this.serveClient(req, res);
      });
      this.source.on("finish", function() {
        return _this.destroy();
      });
    }

    Http.Handler.prototype.destroy = function() {
      return this.app.routes.get = _.reject(this.app.routes.get, function(_arg) {
        var path;
        path = _arg.path;
        return path === this.mount;
      });
    };

    Http.Handler.prototype.serveClient = function(req, res) {
      var _this = this;
      return this.createClient(req, res, function(client) {
        _this.source.addClient(client);
        return res.on("end", function() {
          return _this.source.removeClient(client);
        });
      });
    };

    return Http.Handler;

  })();

  MpegHandler = (function(_super) {
    __extends(MpegHandler, _super);

    function MpegHandler() {
      var _this = this;
      MpegHandler.__super__.constructor.apply(this, arguments);
      this.metadataHandler = function(req, res, next) {
        if (req.query.mount !== _this.mount) {
          return next();
        }
        _this.source.emit("metadata", {
          title: req.query.title,
          artist: req.query.artist
        });
        return res.send("Thanks, brah!");
      };
      this.app.use("/admin/metadata", this.metadataHandler);
    }

    MpegHandler.prototype.destroy = function() {
      var _this = this;
      MpegHandler.__super__.destroy.apply(this, arguments);
      return this.app.stack = _.reject(this.app.stack, function(_arg) {
        var handle;
        handle = _arg.handle;
        return handle === _this.metadataHandler;
      });
    };

    MpegHandler.prototype.createClient = function(req, res, next) {
      var client, icyMetadata;
      if (req.get("Icy-MetaData") === "1") {
        icyMetadata = true;
      } else {
        icyMetadata = false;
      }
      client = new Client.Mpeg({
        icyMetadata: icyMetadata,
        destination: res
      });
      if (icyMetadata) {
        res.set("icy-metaint", client.icyMetadataInterval);
      }
      res.set("Content-Type", "audio/mpeg");
      return next(client);
    };

    MpegHandler.prototype.createSource = function() {
      return this.source = new Mpeg.Source;
    };

    return MpegHandler;

  })(Http.Handler);

  module.exports = function(app) {
    return function(mount, req, res) {
      var handler;
      if (!_.isString(mount)) {
        res = req;
        req = mount;
        mount = req.params.mount;
      }
      if (mount[0] !== '/') {
        mount = "/" + mount;
      }
      if (hasRoute(app, mount)) {
        return res.status(503).end("mount point taken!");
      }
      switch (req.get("Content-Type")) {
        case "audio/mpeg":
          handler = new MpegHandler(app, mount);
          break;
        default:
          return res.send(501);
      }
      req.pipe(handler.source);
      return res.send("Thanks, brah!");
    };
  };

}).call(this);
