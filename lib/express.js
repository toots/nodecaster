// Generated by CoffeeScript 1.6.3
(function() {
  var ExpressHandler, Mpeg, express, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  express = require("express");

  Mpeg = require("./http/mpeg").Mpeg;

  ExpressHandler = (function() {
    function ExpressHandler(app) {
      this.app = app;
      this.metadataHandler = __bind(this.metadataHandler, this);
      this.addSource = __bind(this.addSource, this);
      this.sources = {};
    }

    ExpressHandler.prototype.addSource = function(mount, user, password) {
      var _this = this;
      return function(req, res, next) {
        var handler;
        if (!_.isString(user)) {
          user = mount;
          mount = req.params.mount;
        }
        if (_.isString(user && !_.isString(password))) {
          password = user;
          user = "source";
        }
        if (mount[0] !== '/') {
          mount = "/" + mount;
        }
        if (_this.sources[mount] != null) {
          return res.status(503).end("mount point taken!");
        }
        switch (req.get("Content-Type")) {
          case "audio/mpeg":
            handler = new Mpeg.HttpHandler(_this.app, mount);
            break;
          default:
            return res.send(501);
        }
        _this.sources[mount] = {
          handler: handler,
          user: user,
          password: password
        };
        req.pipe(handler.source);
        _this.app.get(mount, function(req, res) {
          return handler.serveClient(req, res);
        });
        handler.source.on("finish", function() {
          delete _this.sources[mount];
          return _this.app.routes.get = _.reject(_this.app.routes.get, function(_arg) {
            var path;
            path = _arg.path;
            return path === mount;
          });
        });
        return res.send("Thanks, brah!");
      };
    };

    ExpressHandler.prototype.metadataHandler = function(req, res, next) {
      var fn, source, _ref;
      if (((_ref = req.query) != null ? _ref.mount : void 0) == null) {
        return next();
      }
      source = this.sources[req.query.mount];
      if (source == null) {
        return next();
      }
      fn = function(req, res, next) {
        if (!((source.user != null) && (source.password != null))) {
          return next();
        }
        return express.basicAuth(source.user, source.password)(req, res, next);
      };
      return fn(req, res, function() {
        source.handler.source.emit("metadata", {
          title: req.query.title,
          artist: req.query.artist
        });
        return res.send("Thanks, brah!");
      });
    };

    return ExpressHandler;

  })();

  module.exports = {
    enableServer: function(app) {
      var nodeCaster;
      nodeCaster = new ExpressHandler(app);
      app.get("/admin/metadata", nodeCaster.metadataHandler);
      app.get("/admin.cgi", nodeCaster.metadataHandler);
      return nodeCaster;
    }
  };

}).call(this);
