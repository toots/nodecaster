// Generated by CoffeeScript 1.6.3
(function() {
  var Express, Http, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  Http = require("./http").Http;

  module.exports.Express = Express = {
    enableServer: function(app, opts) {
      return new Express.Handler(app, opts);
    }
  };

  Express.Handler = (function() {
    function Handler(app, opts) {
      this.app = app;
      this.opts = opts != null ? opts : {};
      this.metadataHandler = __bind(this.metadataHandler, this);
      this.addSource = __bind(this.addSource, this);
      this.sources = {};
      this.auth = this.opts.auth || function(res, req, next) {
        return next();
      };
      if (!this.noIcyMetadata) {
        this.app.get("/admin/metadata", this.metadataHandler);
        this.app.get("/admin.cgi", this.metadataHandler);
      }
    }

    Handler.prototype.addSource = function(mount) {
      var _this = this;
      return function(req, res, next) {
        if (!_.isString(mount)) {
          mount = req.params.mount;
        }
        return _this.auth(req, res, function() {
          var handler, mime;
          if (mount[0] !== '/') {
            mount = "/" + mount;
          }
          if (_this.sources[mount] != null) {
            return res.status(503).end("mount point taken!");
          }
          mime = req.get("Content-Type");
          switch (mime) {
            case "audio/mpeg":
              handler = new Http.Handler.Mpeg(_this.app, mount);
              break;
            case "application/ogg":
            case "audio/ogg":
            case "video/ogg":
              handler = new Http.Handler.Ogg(_this.app, mount);
              break;
            default:
              return res.send(501);
          }
          _this.sources[mount] = handler;
          req.pipe(handler.source);
          _this.app.get(mount, function(req, res) {
            res.set("Content-Type", mime);
            return handler.serveClient(req, res);
          });
          handler.source.on("finish", function() {
            delete _this.sources[mount];
            return _this.app.routes.get = _.reject(_this.app.routes.get, function(_arg) {
              var path;
              path = _arg.path;
              return path === mount;
            });
          });
          return res.send("Thanks, brah!");
        });
      };
    };

    Handler.prototype.metadataHandler = function(req, res, next) {
      var source, _ref;
      if (((_ref = req.query) != null ? _ref.mount : void 0) == null) {
        return next();
      }
      source = this.sources[req.query.mount];
      if (source == null) {
        return next();
      }
      return this.auth(req, res, function() {
        source.emit("metadata", {
          title: req.query.title,
          artist: req.query.artist
        });
        return res.send("Thanks, brah!");
      });
    };

    return Handler;

  })();

}).call(this);
