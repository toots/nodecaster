// Generated by CoffeeScript 1.6.3
(function() {
  var HttpHandler, Mpeg,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mpeg = require("../formats/mpeg").Mpeg;

  HttpHandler = require("../http").HttpHandler;

  module.exports.Mpeg = Mpeg;

  Mpeg.HttpHandler = (function(_super) {
    __extends(HttpHandler, _super);

    function HttpHandler() {
      HttpHandler.__super__.constructor.apply(this, arguments);
      this.on("metadata", function(metadata) {
        var _ref;
        return (_ref = this.source) != null ? _ref.onMetadata(metadata) : void 0;
      });
    }

    HttpHandler.prototype.createClient = function(req, res, done) {
      var client, icyMetadata, _ref;
      if (req.get("Icy-MetaData") === "1") {
        icyMetadata = true;
      } else {
        icyMetadata = false;
      }
      client = new Mpeg.Client({
        icyMetadata: icyMetadata,
        metadata: (_ref = this.source) != null ? _ref.metadata : void 0,
        destination: res
      });
      if (icyMetadata) {
        res.set("icy-metaint", client.icyMetadataInterval);
      }
      res.set("Content-Type", "audio/mpeg");
      return done(client);
    };

    HttpHandler.prototype.createSource = function() {
      return this.source = new Mpeg.Source;
    };

    return HttpHandler;

  })(HttpHandler);

}).call(this);
